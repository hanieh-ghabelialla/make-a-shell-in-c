#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <string.h>
#include <unistd.h>
#include <pthread.h>
#include <ctype.h>
#include <signal.h>

#define SIGHUP  1   /* Hangup the process */ 
#define SIGINT  2   /* Interrupt the process */ 
#define SIGQUIT 3   /* Quit the process */ 
#define SIGILL  4   /* Illegal instruction. */ 
#define SIGTRAP 5   /* Trace trap. */ 
#define SIGABRT 6   /* Abort. */





long int findSize(char file_name[]);

void  notice(char *mesg, int time);

void * noticewrapper(void *args);

void *socpwrapper(void *args);

int parse(char *buf, char **args);

void execute(int numargs, char **args);

int builtin(char **args, int numargs);

void socp(char *source, char *destiny);

void ioCopy(int IN, int OUT);

int redirects(int numargs, char *args[]);

void lists(char *pasta);

typedef struct
{
  char msg[100];
  int time;
}  notice_t;

typedef struct
{
  char source[100];
  char destiny[100];
} copy_t;

#define BG 0
#define FG 1
//execute.c module is one the most important part of our implementation
#include "shell.h"
#include <sys/types.h>
#include <sys/wait.h>
int last(int *numargs, char **args)
{
  if (args[*numargs - 1][0] == '&')
  {
    *numargs = *numargs - 1;
    args[*numargs] = NULL;
    return BG;
  }
  return FG; //*return FG or BG defined not shell.h*/
}

//detect pipe symbol in array of Strings return its index or -1 if it does not exist
int containsPipe(int numArgs, char **args)
{
  int index;
  for (index = 0; index < numArgs; index++)
    if (args[index][0] == '|')
    {
      return index;
    }
  return -1;
}
// the work of below function is handeling signals
void sighandler(int signum)
{
   // if the users press control z do the following instruction
    signal(SIGTSTP, sighandler);
//here i tried to make a prompt just like the sample program that professor uploaded on d2l
    printf("job suspended. Type 'fg' to resume.\n");
    int sleep_pid = getpid();
    printf("my pid : %d \n",sleep_pid);
    //kill(getpid(),SIGINT);
}

void execute(int numargs, char **args)
{
  
  
  int pid, pidFilho, status, fd[2];
// determine foreground or background
  int code = last(&numargs, args);
 
  if ((pid = fork()) < 0)
  {                  
    perror("forks");
    exit(1);         
  }                  

  if (pid == 0) //child
  {
    printf(" will run ");
//if the user press control z go to sighandler
    signal(SIGTSTP, sighandler);
    int indice = containsPipe(numargs, args);
// if we do not have pipes
    if (indice == -1)
    {
      redirects(numargs, args);
      execvp(*args, args);
    }
//if we have pipes 
    if (indice > 0)
    {
//dividing the string into two parts before the pipe and after the pipe
      args[indice] = NULL;
      pipe(fd);
      pidFilho = fork();
      if (pidFilho == 0)
      { // write
        numargs = indice;
       
        redirects(numargs, args);
       
        dup2(fd[1], STDOUT_FILENO);
        close(fd[0]);
        close(fd[1]);
      }
      else
      { // read
        args = args + indice + 1;
        numargs = numargs - indice - 1;
        redirects(numargs, args);
        dup2(fd[0], STDIN_FILENO); 
        close(fd[1]);
        close(fd[0]); 
      }
      execvp(*args, args);
    }
    //     command1 | command2
//main parent ======time============>
    //    |
    //parent==========time=========>
    //   |
    //=======
    //  |   |
    //pid   pidFilho===========time===========>

    execvp(*args, args);
    perror(*args);
    exit(1);
  }

  

  if (FG == code)
    while (wait(&status) != pid);



  return;
}
#include <stdio.h>
#include <dirent.h>
#include "shell.h"

void getFileCreationTime(char *path) {
    struct stat attr;
    stat(path, &attr);
    printf("%s", ctime(&attr.st_mtime));
}

void lists(char *pasta)
{
    if (pasta == NULL)
        pasta = ".";

    DIR *d;
    struct dirent *dir;
    d = opendir(pasta);
    if (d)
    {
        while ((dir = readdir(d)) != NULL)
        {
            printf("%15s %i ", dir->d_name, dir->d_reclen);
            getFileCreationTime(pasta);
        }
        closedir(d);
    }
}#include "shell.h"
#include <sys/stat.h>
char prompt[100];

int main()
{
  int len;
  char  line[1024];
//show array of characters
  char *args[64]; 

  while (1)
  {
   char cwd[1024]; // showing the curent working directory
//getcwd is an internal function in gcc that read current working directory and store it in cwd 
   if (getcwd(cwd, sizeof(cwd)) != NULL)
   {
      strcpy(prompt,cwd); //copy
//adding % sign to the last of our prompt
      strcat(prompt,"%"); 
   } 
   else {
       perror("getcwd() error");
       return 1;
   }
//showing our prompt
    printf("%s", prompt);
//receiving input and put it in line
    if (fgets( line, 1023, stdin) == NULL)
    {
      printf("\n");
      exit(0);
    }

    len = strlen( line); //len of line
    if (1 == len)
      continue; 

    if ( line[len - 1] == '\n')
       line[len - 1] = '\0';      // cd /tmp/.... \n ==> cd /tmp/.... \0
//spliting 
    int numargs = parse( line, args); 

//check whether the arguamns are in buitin functions or not

    if (!builtin(args, numargs))
        execute(numargs, args);
   
   
    strcpy(prompt, getenv("PWD"));
    strcat(prompt,"%");

  }
  return 0;
}

int builtin(char **args, int numargs)
{
  if (strcmp(args[0], "exit") == 0)
  {
    exit(0);
    return 1;
  }
  if (0 == strcmp(args[0], "info"))
  {
    printf("it is my simple shell\n");
    return 1; 
  }
  if (strlen(args[0]) > 4 && 0 == strncmp(args[0], "PS1=", 4))
  {
    strcpy(prompt, args[0] + 4);
    return 1; 
  }
  if (0 == strcmp(args[0], "whoami"))
  {
    system("id");
    return 1;  
  }
  if (0 == strcmp(args[0], "cd"))
  {
     int err;
    if (NULL == args[1] || strcmp(args[1], "~") == 0)
    {
      err = chdir(getenv("HOME") ) ;

    }
    else 
    {
      err = chdir( args[1] );

    }
    if(err<0) perror (args[1]);
    else
    {
        strcpy(prompt, getenv("PWD"));
        strcat(prompt,"%");
    }

    return 1;  
  }
 
  
  if (0 == strcmp(args[0], "socp"))
  {
    socp(args[1], args[2]);
    return 1;  
  }
  if (strcmp(args[0], " notice") == 0)
  {
    pthread_t th;
     notice_t *ptr = ( notice_t *)malloc(sizeof( notice_t));
    strcpy(ptr->msg, args[1]);
    ptr->time = atoi(args[2]);
    pthread_create(&th, NULL,  noticewrapper, (void *)ptr);
    return 1;
  }
  if (strcmp(args[0], "socpth") == 0)
  {
    pthread_t th;
    copy_t *ptr = (copy_t *)malloc(sizeof(copy_t));
    strcpy(ptr->source, args[1]);
    strcpy(ptr->destiny, args[2]);
    pthread_create(&th, NULL, socpwrapper, (void *)ptr);
    return 1;
  }
  
  if (strcmp(args[0], "setx") == 0)
  {
    char command[50] = "chmod u=rxw ";
    strcat(command, args[1]);
    system(command);

    return 1;
  }
  if (strcmp(args[0], "removerl") == 0)
  {
    char command[50] = "chmod go-r ";
    strcat(command, args[1]);
    system(command);

    return 1;
  }
  if (strcmp(args[0], "list") == 0)
  {
     lists(args[1]);

    return 1;
  }
  if (strcmp(args[0], "fg") == 0)
  {
      //kill(sleep_pid,SIGABRT);
    return 1;
  }
  return 0;
}
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include "shell.h"

void  notice(char *mesg, int time)
{
  while (time > 0)
  {
    sleep(1);
    time--;
  }
  fprintf(stderr, " notice : %s\n", mesg);
}

void * noticewrapper(void *args)
{
   notice_t *ptr = ( notice_t *)args;
   notice(ptr->msg, ptr->time);
  free(ptr);
  return NULL;
}
#include "shell.h"
//here i used strtok_r as the assignmnet want
int parse (char *buf, char **args)
{
    int cnt = 0;

    char* token;
    char* rest = buf;
    while ((token = strtok_r(rest, " \0 \t", &rest)))
    {
      //printf("%s\n", token);
      *args++ = token;
      cnt++;     
    }
 
  return cnt;
}
#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <string.h>
#include <unistd.h>
#include <pthread.h>
#include <ctype.h>

#define FILE_MODE (S_IRUSR | S_IWUSR)

//The function examines the number of arguments and redirects them
// based on the existence of specified symbols in the arguments.

int redirects(int numargs, char *args[])
{
  if (numargs < 3)
    return numargs;

  if (strcmp(args[numargs - 2], "2>") == 0)
  {
    int fd = creat(args[numargs - 1], FILE_MODE);
    if (fd < 0)
    {
      perror(NULL);
      return -1;
    }
    dup2(fd, STDERR_FILENO);
    args[numargs - 2] = NULL;
    numargs = numargs - 2;
  }
  if (numargs < 3)
    return numargs;
  if (strcmp(args[numargs - 2], ">") == 0)
  {
    int fd1 = creat(args[numargs - 1], FILE_MODE);
    if (fd1 < 0)
    {
      perror(NULL);
      return -1;
    }
    dup2(fd1, STDOUT_FILENO);
    close(fd1);
    args[numargs - 2] = NULL;
    numargs = numargs - 2;
  }
  else
  {
    // check case of append (>>)
    // handle the >> open : O_WRONLY | O_APPEND
    if (strcmp(args[numargs - 2], ">>") == 0)
    {
      int fd2 = open(args[numargs - 1], O_WRONLY | O_APPEND);
      if (fd2 < 0)
      {
        perror(NULL);
        return -1;
      }
      dup2(fd2, STDOUT_FILENO);
      close(fd2);
      args[numargs - 2] = NULL;
      numargs = numargs - 2;
    }
  }
  if (numargs < 3)
    return numargs; // Guard the following section

  if (strcmp(args[numargs - 2], "<") == 0)
  {
    int fd3 = open(args[numargs - 1], O_RDONLY);
    if (fd3 < 0)
    {
      perror(NULL);
      return -1;
    }
    dup2(fd3, STDIN_FILENO);
    close(fd3);
    args[numargs - 2] = NULL;
    numargs = numargs - 2;
  }

  return numargs;
}#include <stdio.h> 
#include <sys/types.h>
#include <unistd.h>
#include <errno.h>
#include <fcntl.h> 
#include <stdlib.h>
#include  <time.h>
#include "shell.h"
#define BUFFSIZE 128

//In this file, the input and output which are our files are written, 
//in fact, IO in our program is written  in this function, in this file, and in this library.

void socp(char *source, char *destiny){
  int fdIn = open(source, O_RDONLY);
  if(fdIn == -1){ 
    printf("Error Number % d\n", errno);  
    perror("open failed");                 
  }

  int fdOut = creat(destiny, S_IRUSR| S_IWUSR );
  if(fdOut == -1){
    printf("Error Number % d\n", errno);  
    perror("creat failed");  
  }

  ioCopy(fdIn, fdOut);
}

void ioCopy (int IN, int OUT) //no error reporting
{ 
 int n;
 char buf[BUFFSIZE];
 while ( ( n = read (IN, buf, BUFFSIZE)) > 0)
 { 
  if (write (OUT, buf, n) != n)
    perror("Typing error!\n");
 }
 if (n < 0)
  perror("Reading mistake!\n");
}
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include "shell.h"

void *socpwrapper(void *args)
{
  copy_t *ptr = (copy_t *)args;
  socp(ptr->source, ptr->destiny);
  free(ptr);
  return NULL;
}